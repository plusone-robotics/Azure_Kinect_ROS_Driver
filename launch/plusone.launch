<?xml version="1.0" ?>
<launch>

  <arg name="camera" default="k4a" />

  <arg name="depth_registration" default="true"
       doc="Hardware depth registration" />

  <arg name="num_worker_threads" default="4"
       doc="Worker threads for the nodelet manager" />


  <!-- Driver settings -->
  <!-- Note: Point cloud processing in the driver will use the factory calibration and is therefore disabled.
             The colour and depth images are processed via 'rgbd_launch' and point clouds are generated via
             'image_proc' using the manual camera calibration. -->
  <arg name="depth_enabled"               default="true" />           <!-- Enable or disable the depth camera -->
  <arg name="depth_mode"                  default="NFOV_UNBINNED" />  <!-- Set the depth camera mode, which affects FOV, depth range, and camera resolution. See Azure Kinect documentation for full details. Valid options: NFOV_UNBINNED, NFOV_2X2BINNED, WFOV_UNBINNED, WFOV_2X2BINNED, and PASSIVE_IR -->
  <arg name="depth_unit"                  default="16UC1" />          <!-- Depth distance units. Options are: "32FC1" (32 bit float metre) or "16UC1" (16 bit integer millimetre) -->
  <arg name="color_enabled"               default="true" />           <!-- Enable or disable the color camera -->
  <arg name="color_resolution"            default="2160P" />          <!-- Resolution at which to run the color camera. Valid options: 720P, 1080P, 1440P, 1536P, 2160P, 3072P -->
  <arg name="fps"                         default="30" />             <!-- FPS to run both cameras at. Valid options are 5, 15, and 30 -->
  <arg name="point_cloud"                 default="true" />           <!-- Generate a point cloud from depth data. Requires depth_enabled -->
  <arg name="rgb_point_cloud"             default="true" />           <!-- Colorize the point cloud using the RBG camera. Requires color_enabled and depth_enabled -->
  <arg name="point_cloud_in_depth_frame"  default="false" />          <!-- Whether the RGB pointcloud is rendered in the depth frame (true) or RGB frame (false). Will either match the resolution of the depth camera (true) or the RGB camera (false). -->
  <arg name="required"                    default="false" />          <!-- Argument which specified if the entire launch file should terminate if the node dies -->
  <arg name="sensor_sn"                   default="" />               <!-- Sensor serial number. If none provided, the first sensor will be selected -->
  <arg name="calibration_url"             default="" />               <!-- Load intrinsic calibration from specific URL (default: "file://$HOME/.ros/camera_info/"") -->
  <arg name="wired_sync_mode"             default="0"/>               <!-- Wired sync mode. 0: OFF, 1: MASTER, 2: SUBORDINATE. -->
  <arg name="subordinate_delay_off_master_usec" default="0"/>         <!-- Delay subordinate camera off master camera by specified amount in usec. -->

  <!-- Processing Modules -->
  <arg name="rgb_processing"                  default="true"  />
  <arg name="debayer_processing"              default="false" />
  <arg name="ir_processing"                   default="false" />
  <arg name="depth_processing"                default="true" />
  <arg name="depth_registered_processing"     default="true" />
  <arg name="disparity_processing"            default="false" />
  <arg name="disparity_registered_processing" default="false" />
  <arg name="hw_registered_processing"        default="true" if="$(arg depth_registration)" />
  <arg name="sw_registered_processing"        default="false" if="$(arg depth_registration)" />
  <arg name="hw_registered_processing"        default="false" unless="$(arg depth_registration)" />
  <arg name="sw_registered_processing"        default="true" unless="$(arg depth_registration)" />

  <group>
    <!-- Start nodelet manager -->
    <arg name="manager" value="$(arg camera)_nodelet_manager" />
    <include file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
      <arg name="name" value="$(arg manager)" />
      <arg name="num_worker_threads"  value="$(arg num_worker_threads)" />
    </include>

    <!-- Start the K4A sensor driver -->
    <node pkg="nodelet" type="nodelet" name="k4a_ros_bridge"
          args="load Azure_Kinect_ROS_Driver/K4AROSBridgeNodelet $(arg manager) --no-bond"
          respawn="true">
      <param name="depth_enabled"                 value="$(arg depth_enabled)" />
      <param name="depth_mode"                    value="$(arg depth_mode)" />
      <param name="depth_unit"                    value="$(arg depth_unit)" />
      <param name="color_enabled"                 value="$(arg color_enabled)" />
      <param name="color_format"                  value="bgra" />
      <param name="color_resolution"              value="$(arg color_resolution)" />
      <param name="fps"                           value="$(arg fps)" />
      <param name="point_cloud"                   value="$(arg point_cloud)" />
      <param name="rgb_point_cloud"               value="$(arg rgb_point_cloud)" />
      <param name="point_cloud_in_depth_frame"    value="$(arg point_cloud_in_depth_frame)" />
      <param name="sensor_sn"                     value="$(arg sensor_sn)" />
      <param name="calibration_url"               value="$(arg calibration_url)" />
      <param name="wired_sync_mode"               value="$(arg wired_sync_mode)"/>
      <param name="subordinate_delay_off_master_usec" value="$(arg subordinate_delay_off_master_usec)"/>
    </node>

    <!-- Load standard constellation of processing nodelets -->
    <include file="$(find rgbd_launch)/launch/includes/processing.launch.xml">
      <arg name="manager"                         value="$(arg manager)" />

      <!-- camera names "rgb", "depth" and "ir" are hard-coded in the driver -->
      <arg name="rgb"                             value="rgb" />
      <arg name="ir"                              value="ir" />
      <arg name="depth"                           value="depth" />
      <arg name="depth_registered"                value="depth_to_rgb" />
      <arg name="depth_registered_filtered"       value="depth_to_rgb" />

      <arg name="rgb_processing"                  value="$(arg rgb_processing)" />
      <arg name="debayer_processing"              value="$(arg debayer_processing)" />
      <arg name="depth_processing"                value="$(arg depth_processing)" />
      <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)" />
      <arg name="disparity_processing"            value="$(arg disparity_processing)" />
      <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)" />
      <arg name="hw_registered_processing"        value="$(arg hw_registered_processing)" />
      <arg name="sw_registered_processing"        value="$(arg sw_registered_processing)" />
    </include>

  </group>

  <!-- Start the K4A POR calibration -->
  <node pkg="azure_kinect_ros_driver" type="k4a_por_calibration_node" name="k4a_por_calibration" output="screen">
  </node>
</launch>
